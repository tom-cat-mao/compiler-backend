Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOT
Rule 2     var_declarations -> VAR var_list
Rule 3     var_declarations -> <empty>
Rule 4     var_list -> var_list var_declaration
Rule 5     var_list -> var_declaration
Rule 6     var_declaration -> id_list COLON type SEMICOLON
Rule 7     id_list -> id_list COMMA ID
Rule 8     id_list -> ID
Rule 9     type -> INTEGER
Rule 10    type -> BOOLEAN
Rule 11    statements -> statements statement SEMICOLON
Rule 12    statements -> statement SEMICOLON
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> assignment
Rule 16    statement -> if_statement
Rule 17    statement -> while_statement
Rule 18    statement -> writeln_statement
Rule 19    assignment -> ID ASSIGN expression
Rule 20    if_statement -> IF expression THEN BEGIN statements END
Rule 21    if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END
Rule 22    if_statement -> IF expression THEN statement
Rule 23    if_statement -> IF expression THEN statement ELSE statement
Rule 24    while_statement -> WHILE expression DO BEGIN statements END
Rule 25    writeln_statement -> WRITELN LPAREN expression RPAREN
Rule 26    writeln_statement -> WRITELN LPAREN string_expression_list RPAREN
Rule 27    string_expression_list -> string_expression_list COMMA string_expression
Rule 28    string_expression_list -> string_expression
Rule 29    string_expression -> expression
Rule 30    string_expression -> STRING
Rule 31    expression -> simple_expression
Rule 32    expression -> simple_expression relop simple_expression
Rule 33    simple_expression -> term
Rule 34    simple_expression -> simple_expression addop term
Rule 35    term -> factor
Rule 36    term -> term mulop factor
Rule 37    factor -> LPAREN expression RPAREN
Rule 38    factor -> NUMBER
Rule 39    factor -> ID
Rule 40    addop -> PLUS
Rule 41    addop -> MINUS
Rule 42    mulop -> TIMES
Rule 43    mulop -> DIVIDE
Rule 44    relop -> LT
Rule 45    relop -> GT
Rule 46    relop -> EQ
Rule 47    relop -> LE
Rule 48    relop -> GE
Rule 49    expression -> expression AND expression

Terminals, with rules where they appear

AND                  : 49
ASSIGN               : 19
BEGIN                : 1 20 21 21 24
BOOLEAN              : 10
COLON                : 6
COMMA                : 7 27
DIVIDE               : 43
DO                   : 24
DOT                  : 1
ELSE                 : 21 23
END                  : 1 20 21 21 24
EQ                   : 46
GE                   : 48
GT                   : 45
ID                   : 1 7 8 19 39
IF                   : 20 21 22 23
INTEGER              : 9
LE                   : 47
LPAREN               : 25 26 37
LT                   : 44
MINUS                : 41
NUMBER               : 38
PLUS                 : 40
PROGRAM              : 1
RPAREN               : 25 26 37
SEMICOLON            : 1 6 11 12
STRING               : 30
THEN                 : 20 21 22 23
TIMES                : 42
VAR                  : 2
WHILE                : 24
WRITELN              : 25 26
error                : 

Nonterminals, with rules where they appear

addop                : 34
assignment           : 15
expression           : 19 20 21 22 23 24 25 29 37 49 49
factor               : 35 36
id_list              : 6 7
if_statement         : 16
mulop                : 36
program              : 0
relop                : 32
simple_expression    : 31 32 32 34
statement            : 11 12 13 14 22 23 23
statements           : 1 11 13 20 21 21 24
string_expression    : 27 28
string_expression_list : 26 27
term                 : 33 34 36
type                 : 6
var_declaration      : 4 5
var_declarations     : 1
var_list             : 2 4
while_statement      : 17
writeln_statement    : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON var_declarations BEGIN statements END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON var_declarations BEGIN statements END DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . var_declarations BEGIN statements END DOT
    (2) var_declarations -> . VAR var_list
    (3) var_declarations -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 3 (var_declarations -> .)

    var_declarations               shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON var_declarations . BEGIN statements END DOT

    BEGIN           shift and go to state 7


state 6

    (2) var_declarations -> VAR . var_list
    (4) var_list -> . var_list var_declaration
    (5) var_list -> . var_declaration
    (6) var_declaration -> . id_list COLON type SEMICOLON
    (7) id_list -> . id_list COMMA ID
    (8) id_list -> . ID

    ID              shift and go to state 11

    var_list                       shift and go to state 8
    var_declaration                shift and go to state 9
    id_list                        shift and go to state 10

state 7

    (1) program -> PROGRAM ID SEMICOLON var_declarations BEGIN . statements END DOT
    (11) statements -> . statements statement SEMICOLON
    (12) statements -> . statement SEMICOLON
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statements                     shift and go to state 13
    statement                      shift and go to state 14
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 8

    (2) var_declarations -> VAR var_list .
    (4) var_list -> var_list . var_declaration
    (6) var_declaration -> . id_list COLON type SEMICOLON
    (7) id_list -> . id_list COMMA ID
    (8) id_list -> . ID

    BEGIN           reduce using rule 2 (var_declarations -> VAR var_list .)
    ID              shift and go to state 11

    var_declaration                shift and go to state 22
    id_list                        shift and go to state 10

state 9

    (5) var_list -> var_declaration .

    ID              reduce using rule 5 (var_list -> var_declaration .)
    BEGIN           reduce using rule 5 (var_list -> var_declaration .)


state 10

    (6) var_declaration -> id_list . COLON type SEMICOLON
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 23
    COMMA           shift and go to state 24


state 11

    (8) id_list -> ID .

    COLON           reduce using rule 8 (id_list -> ID .)
    COMMA           reduce using rule 8 (id_list -> ID .)


state 12

    (19) assignment -> ID . ASSIGN expression

    ASSIGN          shift and go to state 25


state 13

    (1) program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements . END DOT
    (11) statements -> statements . statement SEMICOLON
    (13) statements -> statements . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    END             shift and go to state 26
    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statement                      shift and go to state 27
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 14

    (12) statements -> statement . SEMICOLON
    (14) statements -> statement .

    SEMICOLON       shift and go to state 28
    END             reduce using rule 14 (statements -> statement .)
    ID              reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    WHILE           reduce using rule 14 (statements -> statement .)
    WRITELN         reduce using rule 14 (statements -> statement .)


state 15

    (15) statement -> assignment .

    SEMICOLON       reduce using rule 15 (statement -> assignment .)
    END             reduce using rule 15 (statement -> assignment .)
    ID              reduce using rule 15 (statement -> assignment .)
    IF              reduce using rule 15 (statement -> assignment .)
    WHILE           reduce using rule 15 (statement -> assignment .)
    WRITELN         reduce using rule 15 (statement -> assignment .)
    ELSE            reduce using rule 15 (statement -> assignment .)


state 16

    (16) statement -> if_statement .

    SEMICOLON       reduce using rule 16 (statement -> if_statement .)
    END             reduce using rule 16 (statement -> if_statement .)
    ID              reduce using rule 16 (statement -> if_statement .)
    IF              reduce using rule 16 (statement -> if_statement .)
    WHILE           reduce using rule 16 (statement -> if_statement .)
    WRITELN         reduce using rule 16 (statement -> if_statement .)
    ELSE            reduce using rule 16 (statement -> if_statement .)


state 17

    (17) statement -> while_statement .

    SEMICOLON       reduce using rule 17 (statement -> while_statement .)
    END             reduce using rule 17 (statement -> while_statement .)
    ID              reduce using rule 17 (statement -> while_statement .)
    IF              reduce using rule 17 (statement -> while_statement .)
    WHILE           reduce using rule 17 (statement -> while_statement .)
    WRITELN         reduce using rule 17 (statement -> while_statement .)
    ELSE            reduce using rule 17 (statement -> while_statement .)


state 18

    (18) statement -> writeln_statement .

    SEMICOLON       reduce using rule 18 (statement -> writeln_statement .)
    END             reduce using rule 18 (statement -> writeln_statement .)
    ID              reduce using rule 18 (statement -> writeln_statement .)
    IF              reduce using rule 18 (statement -> writeln_statement .)
    WHILE           reduce using rule 18 (statement -> writeln_statement .)
    WRITELN         reduce using rule 18 (statement -> writeln_statement .)
    ELSE            reduce using rule 18 (statement -> writeln_statement .)


state 19

    (20) if_statement -> IF . expression THEN BEGIN statements END
    (21) if_statement -> IF . expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> IF . expression THEN statement
    (23) if_statement -> IF . expression THEN statement ELSE statement
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 29
    simple_expression              shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 20

    (24) while_statement -> WHILE . expression DO BEGIN statements END
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 36
    simple_expression              shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 21

    (25) writeln_statement -> WRITELN . LPAREN expression RPAREN
    (26) writeln_statement -> WRITELN . LPAREN string_expression_list RPAREN

    LPAREN          shift and go to state 37


state 22

    (4) var_list -> var_list var_declaration .

    ID              reduce using rule 4 (var_list -> var_list var_declaration .)
    BEGIN           reduce using rule 4 (var_list -> var_list var_declaration .)


state 23

    (6) var_declaration -> id_list COLON . type SEMICOLON
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN

    INTEGER         shift and go to state 39
    BOOLEAN         shift and go to state 40

    type                           shift and go to state 38

state 24

    (7) id_list -> id_list COMMA . ID

    ID              shift and go to state 41


state 25

    (19) assignment -> ID ASSIGN . expression
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 42
    simple_expression              shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 26

    (1) program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements END . DOT

    DOT             shift and go to state 43


state 27

    (11) statements -> statements statement . SEMICOLON
    (13) statements -> statements statement .

    SEMICOLON       shift and go to state 44
    END             reduce using rule 13 (statements -> statements statement .)
    ID              reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    WHILE           reduce using rule 13 (statements -> statements statement .)
    WRITELN         reduce using rule 13 (statements -> statements statement .)


state 28

    (12) statements -> statement SEMICOLON .

    END             reduce using rule 12 (statements -> statement SEMICOLON .)
    ID              reduce using rule 12 (statements -> statement SEMICOLON .)
    IF              reduce using rule 12 (statements -> statement SEMICOLON .)
    WHILE           reduce using rule 12 (statements -> statement SEMICOLON .)
    WRITELN         reduce using rule 12 (statements -> statement SEMICOLON .)


state 29

    (20) if_statement -> IF expression . THEN BEGIN statements END
    (21) if_statement -> IF expression . THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> IF expression . THEN statement
    (23) if_statement -> IF expression . THEN statement ELSE statement
    (49) expression -> expression . AND expression

    THEN            shift and go to state 45
    AND             shift and go to state 46


state 30

    (31) expression -> simple_expression .
    (32) expression -> simple_expression . relop simple_expression
    (34) simple_expression -> simple_expression . addop term
    (44) relop -> . LT
    (45) relop -> . GT
    (46) relop -> . EQ
    (47) relop -> . LE
    (48) relop -> . GE
    (40) addop -> . PLUS
    (41) addop -> . MINUS

    THEN            reduce using rule 31 (expression -> simple_expression .)
    AND             reduce using rule 31 (expression -> simple_expression .)
    DO              reduce using rule 31 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 31 (expression -> simple_expression .)
    END             reduce using rule 31 (expression -> simple_expression .)
    ID              reduce using rule 31 (expression -> simple_expression .)
    IF              reduce using rule 31 (expression -> simple_expression .)
    WHILE           reduce using rule 31 (expression -> simple_expression .)
    WRITELN         reduce using rule 31 (expression -> simple_expression .)
    ELSE            reduce using rule 31 (expression -> simple_expression .)
    RPAREN          reduce using rule 31 (expression -> simple_expression .)
    COMMA           reduce using rule 31 (expression -> simple_expression .)
    LT              shift and go to state 49
    GT              shift and go to state 50
    EQ              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55

    relop                          shift and go to state 47
    addop                          shift and go to state 48

state 31

    (33) simple_expression -> term .
    (36) term -> term . mulop factor
    (42) mulop -> . TIMES
    (43) mulop -> . DIVIDE

    LT              reduce using rule 33 (simple_expression -> term .)
    GT              reduce using rule 33 (simple_expression -> term .)
    EQ              reduce using rule 33 (simple_expression -> term .)
    LE              reduce using rule 33 (simple_expression -> term .)
    GE              reduce using rule 33 (simple_expression -> term .)
    PLUS            reduce using rule 33 (simple_expression -> term .)
    MINUS           reduce using rule 33 (simple_expression -> term .)
    THEN            reduce using rule 33 (simple_expression -> term .)
    AND             reduce using rule 33 (simple_expression -> term .)
    DO              reduce using rule 33 (simple_expression -> term .)
    SEMICOLON       reduce using rule 33 (simple_expression -> term .)
    END             reduce using rule 33 (simple_expression -> term .)
    ID              reduce using rule 33 (simple_expression -> term .)
    IF              reduce using rule 33 (simple_expression -> term .)
    WHILE           reduce using rule 33 (simple_expression -> term .)
    WRITELN         reduce using rule 33 (simple_expression -> term .)
    ELSE            reduce using rule 33 (simple_expression -> term .)
    RPAREN          reduce using rule 33 (simple_expression -> term .)
    COMMA           reduce using rule 33 (simple_expression -> term .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58

    mulop                          shift and go to state 56

state 32

    (35) term -> factor .

    TIMES           reduce using rule 35 (term -> factor .)
    DIVIDE          reduce using rule 35 (term -> factor .)
    LT              reduce using rule 35 (term -> factor .)
    GT              reduce using rule 35 (term -> factor .)
    EQ              reduce using rule 35 (term -> factor .)
    LE              reduce using rule 35 (term -> factor .)
    GE              reduce using rule 35 (term -> factor .)
    PLUS            reduce using rule 35 (term -> factor .)
    MINUS           reduce using rule 35 (term -> factor .)
    THEN            reduce using rule 35 (term -> factor .)
    AND             reduce using rule 35 (term -> factor .)
    DO              reduce using rule 35 (term -> factor .)
    SEMICOLON       reduce using rule 35 (term -> factor .)
    END             reduce using rule 35 (term -> factor .)
    ID              reduce using rule 35 (term -> factor .)
    IF              reduce using rule 35 (term -> factor .)
    WHILE           reduce using rule 35 (term -> factor .)
    WRITELN         reduce using rule 35 (term -> factor .)
    ELSE            reduce using rule 35 (term -> factor .)
    RPAREN          reduce using rule 35 (term -> factor .)
    COMMA           reduce using rule 35 (term -> factor .)


state 33

    (37) factor -> LPAREN . expression RPAREN
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 59
    simple_expression              shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 34

    (38) factor -> NUMBER .

    TIMES           reduce using rule 38 (factor -> NUMBER .)
    DIVIDE          reduce using rule 38 (factor -> NUMBER .)
    LT              reduce using rule 38 (factor -> NUMBER .)
    GT              reduce using rule 38 (factor -> NUMBER .)
    EQ              reduce using rule 38 (factor -> NUMBER .)
    LE              reduce using rule 38 (factor -> NUMBER .)
    GE              reduce using rule 38 (factor -> NUMBER .)
    PLUS            reduce using rule 38 (factor -> NUMBER .)
    MINUS           reduce using rule 38 (factor -> NUMBER .)
    THEN            reduce using rule 38 (factor -> NUMBER .)
    AND             reduce using rule 38 (factor -> NUMBER .)
    DO              reduce using rule 38 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 38 (factor -> NUMBER .)
    END             reduce using rule 38 (factor -> NUMBER .)
    ID              reduce using rule 38 (factor -> NUMBER .)
    IF              reduce using rule 38 (factor -> NUMBER .)
    WHILE           reduce using rule 38 (factor -> NUMBER .)
    WRITELN         reduce using rule 38 (factor -> NUMBER .)
    ELSE            reduce using rule 38 (factor -> NUMBER .)
    RPAREN          reduce using rule 38 (factor -> NUMBER .)
    COMMA           reduce using rule 38 (factor -> NUMBER .)


state 35

    (39) factor -> ID .

    TIMES           reduce using rule 39 (factor -> ID .)
    DIVIDE          reduce using rule 39 (factor -> ID .)
    LT              reduce using rule 39 (factor -> ID .)
    GT              reduce using rule 39 (factor -> ID .)
    EQ              reduce using rule 39 (factor -> ID .)
    LE              reduce using rule 39 (factor -> ID .)
    GE              reduce using rule 39 (factor -> ID .)
    PLUS            reduce using rule 39 (factor -> ID .)
    MINUS           reduce using rule 39 (factor -> ID .)
    THEN            reduce using rule 39 (factor -> ID .)
    AND             reduce using rule 39 (factor -> ID .)
    DO              reduce using rule 39 (factor -> ID .)
    SEMICOLON       reduce using rule 39 (factor -> ID .)
    END             reduce using rule 39 (factor -> ID .)
    ID              reduce using rule 39 (factor -> ID .)
    IF              reduce using rule 39 (factor -> ID .)
    WHILE           reduce using rule 39 (factor -> ID .)
    WRITELN         reduce using rule 39 (factor -> ID .)
    ELSE            reduce using rule 39 (factor -> ID .)
    RPAREN          reduce using rule 39 (factor -> ID .)
    COMMA           reduce using rule 39 (factor -> ID .)


state 36

    (24) while_statement -> WHILE expression . DO BEGIN statements END
    (49) expression -> expression . AND expression

    DO              shift and go to state 60
    AND             shift and go to state 46


state 37

    (25) writeln_statement -> WRITELN LPAREN . expression RPAREN
    (26) writeln_statement -> WRITELN LPAREN . string_expression_list RPAREN
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (27) string_expression_list -> . string_expression_list COMMA string_expression
    (28) string_expression_list -> . string_expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (29) string_expression -> . expression
    (30) string_expression -> . STRING
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    STRING          shift and go to state 64
    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 61
    string_expression_list         shift and go to state 62
    simple_expression              shift and go to state 30
    string_expression              shift and go to state 63
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 38

    (6) var_declaration -> id_list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 65


state 39

    (9) type -> INTEGER .

    SEMICOLON       reduce using rule 9 (type -> INTEGER .)


state 40

    (10) type -> BOOLEAN .

    SEMICOLON       reduce using rule 10 (type -> BOOLEAN .)


state 41

    (7) id_list -> id_list COMMA ID .

    COLON           reduce using rule 7 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 7 (id_list -> id_list COMMA ID .)


state 42

    (19) assignment -> ID ASSIGN expression .
    (49) expression -> expression . AND expression

    SEMICOLON       reduce using rule 19 (assignment -> ID ASSIGN expression .)
    END             reduce using rule 19 (assignment -> ID ASSIGN expression .)
    ID              reduce using rule 19 (assignment -> ID ASSIGN expression .)
    IF              reduce using rule 19 (assignment -> ID ASSIGN expression .)
    WHILE           reduce using rule 19 (assignment -> ID ASSIGN expression .)
    WRITELN         reduce using rule 19 (assignment -> ID ASSIGN expression .)
    ELSE            reduce using rule 19 (assignment -> ID ASSIGN expression .)
    AND             shift and go to state 46


state 43

    (1) program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOT .)


state 44

    (11) statements -> statements statement SEMICOLON .

    END             reduce using rule 11 (statements -> statements statement SEMICOLON .)
    ID              reduce using rule 11 (statements -> statements statement SEMICOLON .)
    IF              reduce using rule 11 (statements -> statements statement SEMICOLON .)
    WHILE           reduce using rule 11 (statements -> statements statement SEMICOLON .)
    WRITELN         reduce using rule 11 (statements -> statements statement SEMICOLON .)


state 45

    (20) if_statement -> IF expression THEN . BEGIN statements END
    (21) if_statement -> IF expression THEN . BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> IF expression THEN . statement
    (23) if_statement -> IF expression THEN . statement ELSE statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    BEGIN           shift and go to state 66
    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statement                      shift and go to state 67
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 46

    (49) expression -> expression AND . expression
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 68
    simple_expression              shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 47

    (32) expression -> simple_expression relop . simple_expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    simple_expression              shift and go to state 69
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 48

    (34) simple_expression -> simple_expression addop . term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    term                           shift and go to state 70
    factor                         shift and go to state 32

state 49

    (44) relop -> LT .

    LPAREN          reduce using rule 44 (relop -> LT .)
    NUMBER          reduce using rule 44 (relop -> LT .)
    ID              reduce using rule 44 (relop -> LT .)


state 50

    (45) relop -> GT .

    LPAREN          reduce using rule 45 (relop -> GT .)
    NUMBER          reduce using rule 45 (relop -> GT .)
    ID              reduce using rule 45 (relop -> GT .)


state 51

    (46) relop -> EQ .

    LPAREN          reduce using rule 46 (relop -> EQ .)
    NUMBER          reduce using rule 46 (relop -> EQ .)
    ID              reduce using rule 46 (relop -> EQ .)


state 52

    (47) relop -> LE .

    LPAREN          reduce using rule 47 (relop -> LE .)
    NUMBER          reduce using rule 47 (relop -> LE .)
    ID              reduce using rule 47 (relop -> LE .)


state 53

    (48) relop -> GE .

    LPAREN          reduce using rule 48 (relop -> GE .)
    NUMBER          reduce using rule 48 (relop -> GE .)
    ID              reduce using rule 48 (relop -> GE .)


state 54

    (40) addop -> PLUS .

    LPAREN          reduce using rule 40 (addop -> PLUS .)
    NUMBER          reduce using rule 40 (addop -> PLUS .)
    ID              reduce using rule 40 (addop -> PLUS .)


state 55

    (41) addop -> MINUS .

    LPAREN          reduce using rule 41 (addop -> MINUS .)
    NUMBER          reduce using rule 41 (addop -> MINUS .)
    ID              reduce using rule 41 (addop -> MINUS .)


state 56

    (36) term -> term mulop . factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    factor                         shift and go to state 71

state 57

    (42) mulop -> TIMES .

    LPAREN          reduce using rule 42 (mulop -> TIMES .)
    NUMBER          reduce using rule 42 (mulop -> TIMES .)
    ID              reduce using rule 42 (mulop -> TIMES .)


state 58

    (43) mulop -> DIVIDE .

    LPAREN          reduce using rule 43 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 43 (mulop -> DIVIDE .)
    ID              reduce using rule 43 (mulop -> DIVIDE .)


state 59

    (37) factor -> LPAREN expression . RPAREN
    (49) expression -> expression . AND expression

    RPAREN          shift and go to state 72
    AND             shift and go to state 46


state 60

    (24) while_statement -> WHILE expression DO . BEGIN statements END

    BEGIN           shift and go to state 73


state 61

    (25) writeln_statement -> WRITELN LPAREN expression . RPAREN
    (49) expression -> expression . AND expression
    (29) string_expression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 74
    AND             shift and go to state 46
    COMMA           reduce using rule 29 (string_expression -> expression .)

  ! RPAREN          [ reduce using rule 29 (string_expression -> expression .) ]


state 62

    (26) writeln_statement -> WRITELN LPAREN string_expression_list . RPAREN
    (27) string_expression_list -> string_expression_list . COMMA string_expression

    RPAREN          shift and go to state 75
    COMMA           shift and go to state 76


state 63

    (28) string_expression_list -> string_expression .

    RPAREN          reduce using rule 28 (string_expression_list -> string_expression .)
    COMMA           reduce using rule 28 (string_expression_list -> string_expression .)


state 64

    (30) string_expression -> STRING .

    RPAREN          reduce using rule 30 (string_expression -> STRING .)
    COMMA           reduce using rule 30 (string_expression -> STRING .)


state 65

    (6) var_declaration -> id_list COLON type SEMICOLON .

    ID              reduce using rule 6 (var_declaration -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 6 (var_declaration -> id_list COLON type SEMICOLON .)


state 66

    (20) if_statement -> IF expression THEN BEGIN . statements END
    (21) if_statement -> IF expression THEN BEGIN . statements END ELSE BEGIN statements END
    (11) statements -> . statements statement SEMICOLON
    (12) statements -> . statement SEMICOLON
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statements                     shift and go to state 77
    statement                      shift and go to state 14
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 67

    (22) if_statement -> IF expression THEN statement .
    (23) if_statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 22 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 22 (if_statement -> IF expression THEN statement .)
    ID              reduce using rule 22 (if_statement -> IF expression THEN statement .)
    IF              reduce using rule 22 (if_statement -> IF expression THEN statement .)
    WHILE           reduce using rule 22 (if_statement -> IF expression THEN statement .)
    WRITELN         reduce using rule 22 (if_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 78

  ! ELSE            [ reduce using rule 22 (if_statement -> IF expression THEN statement .) ]


state 68

    (49) expression -> expression AND expression .
    (49) expression -> expression . AND expression

  ! shift/reduce conflict for AND resolved as shift
    THEN            reduce using rule 49 (expression -> expression AND expression .)
    DO              reduce using rule 49 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression AND expression .)
    END             reduce using rule 49 (expression -> expression AND expression .)
    ID              reduce using rule 49 (expression -> expression AND expression .)
    IF              reduce using rule 49 (expression -> expression AND expression .)
    WHILE           reduce using rule 49 (expression -> expression AND expression .)
    WRITELN         reduce using rule 49 (expression -> expression AND expression .)
    ELSE            reduce using rule 49 (expression -> expression AND expression .)
    RPAREN          reduce using rule 49 (expression -> expression AND expression .)
    COMMA           reduce using rule 49 (expression -> expression AND expression .)
    AND             shift and go to state 46

  ! AND             [ reduce using rule 49 (expression -> expression AND expression .) ]


state 69

    (32) expression -> simple_expression relop simple_expression .
    (34) simple_expression -> simple_expression . addop term
    (40) addop -> . PLUS
    (41) addop -> . MINUS

    THEN            reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    AND             reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    ID              reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    IF              reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    WHILE           reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    WRITELN         reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 32 (expression -> simple_expression relop simple_expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55

    addop                          shift and go to state 48

state 70

    (34) simple_expression -> simple_expression addop term .
    (36) term -> term . mulop factor
    (42) mulop -> . TIMES
    (43) mulop -> . DIVIDE

    LT              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    GT              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    EQ              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    LE              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    GE              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    PLUS            reduce using rule 34 (simple_expression -> simple_expression addop term .)
    MINUS           reduce using rule 34 (simple_expression -> simple_expression addop term .)
    THEN            reduce using rule 34 (simple_expression -> simple_expression addop term .)
    AND             reduce using rule 34 (simple_expression -> simple_expression addop term .)
    DO              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    SEMICOLON       reduce using rule 34 (simple_expression -> simple_expression addop term .)
    END             reduce using rule 34 (simple_expression -> simple_expression addop term .)
    ID              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    IF              reduce using rule 34 (simple_expression -> simple_expression addop term .)
    WHILE           reduce using rule 34 (simple_expression -> simple_expression addop term .)
    WRITELN         reduce using rule 34 (simple_expression -> simple_expression addop term .)
    ELSE            reduce using rule 34 (simple_expression -> simple_expression addop term .)
    RPAREN          reduce using rule 34 (simple_expression -> simple_expression addop term .)
    COMMA           reduce using rule 34 (simple_expression -> simple_expression addop term .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58

    mulop                          shift and go to state 56

state 71

    (36) term -> term mulop factor .

    TIMES           reduce using rule 36 (term -> term mulop factor .)
    DIVIDE          reduce using rule 36 (term -> term mulop factor .)
    LT              reduce using rule 36 (term -> term mulop factor .)
    GT              reduce using rule 36 (term -> term mulop factor .)
    EQ              reduce using rule 36 (term -> term mulop factor .)
    LE              reduce using rule 36 (term -> term mulop factor .)
    GE              reduce using rule 36 (term -> term mulop factor .)
    PLUS            reduce using rule 36 (term -> term mulop factor .)
    MINUS           reduce using rule 36 (term -> term mulop factor .)
    THEN            reduce using rule 36 (term -> term mulop factor .)
    AND             reduce using rule 36 (term -> term mulop factor .)
    DO              reduce using rule 36 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 36 (term -> term mulop factor .)
    END             reduce using rule 36 (term -> term mulop factor .)
    ID              reduce using rule 36 (term -> term mulop factor .)
    IF              reduce using rule 36 (term -> term mulop factor .)
    WHILE           reduce using rule 36 (term -> term mulop factor .)
    WRITELN         reduce using rule 36 (term -> term mulop factor .)
    ELSE            reduce using rule 36 (term -> term mulop factor .)
    RPAREN          reduce using rule 36 (term -> term mulop factor .)
    COMMA           reduce using rule 36 (term -> term mulop factor .)


state 72

    (37) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    WRITELN         reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 37 (factor -> LPAREN expression RPAREN .)


state 73

    (24) while_statement -> WHILE expression DO BEGIN . statements END
    (11) statements -> . statements statement SEMICOLON
    (12) statements -> . statement SEMICOLON
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statements                     shift and go to state 79
    statement                      shift and go to state 14
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 74

    (25) writeln_statement -> WRITELN LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)
    END             reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)
    ID              reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)
    IF              reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)
    WHILE           reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)
    WRITELN         reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)
    ELSE            reduce using rule 25 (writeln_statement -> WRITELN LPAREN expression RPAREN .)


state 75

    (26) writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .

    SEMICOLON       reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)
    END             reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)
    ID              reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)
    IF              reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)
    WHILE           reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)
    WRITELN         reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)
    ELSE            reduce using rule 26 (writeln_statement -> WRITELN LPAREN string_expression_list RPAREN .)


state 76

    (27) string_expression_list -> string_expression_list COMMA . string_expression
    (29) string_expression -> . expression
    (30) string_expression -> . STRING
    (31) expression -> . simple_expression
    (32) expression -> . simple_expression relop simple_expression
    (49) expression -> . expression AND expression
    (33) simple_expression -> . term
    (34) simple_expression -> . simple_expression addop term
    (35) term -> . factor
    (36) term -> . term mulop factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . NUMBER
    (39) factor -> . ID

    STRING          shift and go to state 64
    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 35

    string_expression              shift and go to state 80
    expression                     shift and go to state 81
    simple_expression              shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 77

    (20) if_statement -> IF expression THEN BEGIN statements . END
    (21) if_statement -> IF expression THEN BEGIN statements . END ELSE BEGIN statements END
    (11) statements -> statements . statement SEMICOLON
    (13) statements -> statements . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    END             shift and go to state 82
    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statement                      shift and go to state 27
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 78

    (23) if_statement -> IF expression THEN statement ELSE . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statement                      shift and go to state 83
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 79

    (24) while_statement -> WHILE expression DO BEGIN statements . END
    (11) statements -> statements . statement SEMICOLON
    (13) statements -> statements . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    END             shift and go to state 84
    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statement                      shift and go to state 27
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 80

    (27) string_expression_list -> string_expression_list COMMA string_expression .

    RPAREN          reduce using rule 27 (string_expression_list -> string_expression_list COMMA string_expression .)
    COMMA           reduce using rule 27 (string_expression_list -> string_expression_list COMMA string_expression .)


state 81

    (29) string_expression -> expression .
    (49) expression -> expression . AND expression

    RPAREN          reduce using rule 29 (string_expression -> expression .)
    COMMA           reduce using rule 29 (string_expression -> expression .)
    AND             shift and go to state 46


state 82

    (20) if_statement -> IF expression THEN BEGIN statements END .
    (21) if_statement -> IF expression THEN BEGIN statements END . ELSE BEGIN statements END

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .)
    END             reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .)
    ID              reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .)
    IF              reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .)
    WHILE           reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .)
    WRITELN         reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .)
    ELSE            shift and go to state 85

  ! ELSE            [ reduce using rule 20 (if_statement -> IF expression THEN BEGIN statements END .) ]


state 83

    (23) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)
    ID              reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)
    IF              reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)
    WHILE           reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)
    WRITELN         reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 23 (if_statement -> IF expression THEN statement ELSE statement .)


state 84

    (24) while_statement -> WHILE expression DO BEGIN statements END .

    SEMICOLON       reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)
    END             reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)
    ID              reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)
    IF              reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)
    WHILE           reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)
    WRITELN         reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)
    ELSE            reduce using rule 24 (while_statement -> WHILE expression DO BEGIN statements END .)


state 85

    (21) if_statement -> IF expression THEN BEGIN statements END ELSE . BEGIN statements END

    BEGIN           shift and go to state 86


state 86

    (21) if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN . statements END
    (11) statements -> . statements statement SEMICOLON
    (12) statements -> . statement SEMICOLON
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statements                     shift and go to state 87
    statement                      shift and go to state 14
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 87

    (21) if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements . END
    (11) statements -> statements . statement SEMICOLON
    (13) statements -> statements . statement
    (15) statement -> . assignment
    (16) statement -> . if_statement
    (17) statement -> . while_statement
    (18) statement -> . writeln_statement
    (19) assignment -> . ID ASSIGN expression
    (20) if_statement -> . IF expression THEN BEGIN statements END
    (21) if_statement -> . IF expression THEN BEGIN statements END ELSE BEGIN statements END
    (22) if_statement -> . IF expression THEN statement
    (23) if_statement -> . IF expression THEN statement ELSE statement
    (24) while_statement -> . WHILE expression DO BEGIN statements END
    (25) writeln_statement -> . WRITELN LPAREN expression RPAREN
    (26) writeln_statement -> . WRITELN LPAREN string_expression_list RPAREN

    END             shift and go to state 88
    ID              shift and go to state 12
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    WRITELN         shift and go to state 21

    statement                      shift and go to state 27
    assignment                     shift and go to state 15
    if_statement                   shift and go to state 16
    while_statement                shift and go to state 17
    writeln_statement              shift and go to state 18

state 88

    (21) if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .

    SEMICOLON       reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)
    END             reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)
    ID              reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)
    IF              reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)
    WHILE           reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)
    WRITELN         reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)
    ELSE            reduce using rule 21 (if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 82 resolved as shift
