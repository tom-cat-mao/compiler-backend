
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN CHAR COLON COMMA DIVIDE DO DOT DOTDOT ELSE END EQ GE GT ID IF INTEGER LE LPAREN LSQUARE LT MINUS NUMBER OF PLUS PROGRAM REAL REAL_NUMBER RPAREN RSQUARE SEMICOLON STRING THEN TIMES VAR WHILE WRITELNprogram : PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOTvar_declarations : VAR var_list\n| var_list : var_list var_declaration\n| var_declarationvar_declaration : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n| IDvariable : ID\n| ID LSQUARE expression RSQUAREtype : INTEGER\n| BOOLEAN\n| REAL\n| CHAR\n| array_type_definitionarray_type_definition : ARRAY LSQUARE index_range RSQUARE OF typeindex_range : NUMBER DOTDOT NUMBERstatements : statements statement SEMICOLON\n| statement SEMICOLON\n| statements statement\n| statementstatement : assignment\n| if_statement\n| while_statement\n| writeln_statementassignment : variable ASSIGN expressionif_statement : IF expression THEN BEGIN statements END\n| IF expression THEN BEGIN statements END ELSE BEGIN statements END\n| IF expression THEN statement\n| IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO BEGIN statements ENDexpression_list : expression_list COMMA expression\n| expressionwriteln_statement : WRITELN LPAREN expression_list RPARENexpression : simple_expression\n| simple_expression relop simple_expressionsimple_expression : term\n| simple_expression addop termterm : factor\n| term mulop factorfactor : LPAREN expression RPAREN\n| NUMBER\n| REAL_NUMBER\n| STRING\n| variableaddop : PLUS\n| MINUSmulop : TIMES\n| DIVIDErelop : LT\n| GT\n| EQ\n| LE\n| GEexpression : expression AND expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,51,],[0,-1,]),'ID':([2,6,7,8,9,12,13,14,15,16,17,18,20,21,23,25,26,28,29,30,32,33,34,35,36,37,38,39,41,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,74,75,76,77,78,79,80,81,82,83,84,87,88,89,93,94,95,100,101,102,],[3,11,12,11,-5,-9,12,-21,-22,-23,-24,-25,12,12,-4,49,12,-20,-19,12,-35,-37,-39,12,-42,-43,-44,-45,12,-18,-26,12,12,12,12,-50,-51,-52,-53,-54,-46,-47,12,-48,-49,-6,-10,12,-29,-55,-36,-38,-40,-41,12,-34,12,12,12,12,-27,-30,-31,12,12,-28,]),'SEMICOLON':([3,12,14,15,16,17,18,28,32,33,34,36,37,38,39,42,43,44,45,46,47,53,74,76,77,78,79,80,81,83,93,94,95,99,102,],[4,-9,29,-22,-23,-24,-25,52,-35,-37,-39,-42,-43,-44,-45,72,-11,-12,-13,-14,-15,-26,-10,-29,-55,-36,-38,-40,-41,-34,-27,-30,-31,-16,-28,]),'VAR':([4,],[6,]),'BEGIN':([4,5,8,9,23,54,69,72,98,],[-3,7,-2,-5,-4,75,82,-6,100,]),'IF':([7,12,13,14,15,16,17,18,28,29,32,33,34,36,37,38,39,52,53,54,74,75,76,77,78,79,80,81,82,83,87,88,89,93,94,95,100,101,102,],[20,-9,20,-21,-22,-23,-24,-25,-20,-19,-35,-37,-39,-42,-43,-44,-45,-18,-26,20,-10,20,-29,-55,-36,-38,-40,-41,20,-34,20,20,20,-27,-30,-31,20,20,-28,]),'WHILE':([7,12,13,14,15,16,17,18,28,29,32,33,34,36,37,38,39,52,53,54,74,75,76,77,78,79,80,81,82,83,87,88,89,93,94,95,100,101,102,],[21,-9,21,-21,-22,-23,-24,-25,-20,-19,-35,-37,-39,-42,-43,-44,-45,-18,-26,21,-10,21,-29,-55,-36,-38,-40,-41,21,-34,21,21,21,-27,-30,-31,21,21,-28,]),'WRITELN':([7,12,13,14,15,16,17,18,28,29,32,33,34,36,37,38,39,52,53,54,74,75,76,77,78,79,80,81,82,83,87,88,89,93,94,95,100,101,102,],[22,-9,22,-21,-22,-23,-24,-25,-20,-19,-35,-37,-39,-42,-43,-44,-45,-18,-26,22,-10,22,-29,-55,-36,-38,-40,-41,22,-34,22,22,22,-27,-30,-31,22,22,-28,]),'COLON':([10,11,49,],[24,-8,-7,]),'COMMA':([10,11,12,32,33,34,36,37,38,39,49,70,71,74,77,78,79,80,81,90,],[25,-8,-9,-35,-37,-39,-42,-43,-44,-45,-7,84,-33,-10,-55,-36,-38,-40,-41,-32,]),'ASSIGN':([12,19,74,],[-9,30,-10,]),'TIMES':([12,33,34,36,37,38,39,74,79,80,81,],[-9,66,-39,-42,-43,-44,-45,-10,66,-40,-41,]),'DIVIDE':([12,33,34,36,37,38,39,74,79,80,81,],[-9,67,-39,-42,-43,-44,-45,-10,67,-40,-41,]),'LT':([12,32,33,34,36,37,38,39,74,79,80,81,],[-9,58,-37,-39,-42,-43,-44,-45,-10,-38,-40,-41,]),'GT':([12,32,33,34,36,37,38,39,74,79,80,81,],[-9,59,-37,-39,-42,-43,-44,-45,-10,-38,-40,-41,]),'EQ':([12,32,33,34,36,37,38,39,74,79,80,81,],[-9,60,-37,-39,-42,-43,-44,-45,-10,-38,-40,-41,]),'LE':([12,32,33,34,36,37,38,39,74,79,80,81,],[-9,61,-37,-39,-42,-43,-44,-45,-10,-38,-40,-41,]),'GE':([12,32,33,34,36,37,38,39,74,79,80,81,],[-9,62,-37,-39,-42,-43,-44,-45,-10,-38,-40,-41,]),'PLUS':([12,32,33,34,36,37,38,39,74,78,79,80,81,],[-9,63,-37,-39,-42,-43,-44,-45,-10,63,-38,-40,-41,]),'MINUS':([12,32,33,34,36,37,38,39,74,78,79,80,81,],[-9,64,-37,-39,-42,-43,-44,-45,-10,64,-38,-40,-41,]),'THEN':([12,31,32,33,34,36,37,38,39,74,77,78,79,80,81,],[-9,54,-35,-37,-39,-42,-43,-44,-45,-10,-55,-36,-38,-40,-41,]),'AND':([12,31,32,33,34,36,37,38,39,40,50,53,68,71,74,77,78,79,80,81,90,],[-9,55,-35,-37,-39,-42,-43,-44,-45,55,55,55,55,55,-10,55,-36,-38,-40,-41,55,]),'DO':([12,32,33,34,36,37,38,39,40,74,77,78,79,80,81,],[-9,-35,-37,-39,-42,-43,-44,-45,69,-10,-55,-36,-38,-40,-41,]),'RSQUARE':([12,32,33,34,36,37,38,39,50,74,77,78,79,80,81,85,97,],[-9,-35,-37,-39,-42,-43,-44,-45,74,-10,-55,-36,-38,-40,-41,91,-17,]),'END':([12,13,14,15,16,17,18,28,29,32,33,34,36,37,38,39,52,53,74,76,77,78,79,80,81,83,87,89,93,94,95,101,102,],[-9,27,-21,-22,-23,-24,-25,-20,-19,-35,-37,-39,-42,-43,-44,-45,-18,-26,-10,-29,-55,-36,-38,-40,-41,-34,93,95,-27,-30,-31,102,-28,]),'ELSE':([12,15,16,17,18,32,33,34,36,37,38,39,53,74,76,77,78,79,80,81,83,93,94,95,102,],[-9,-22,-23,-24,-25,-35,-37,-39,-42,-43,-44,-45,-26,-10,88,-55,-36,-38,-40,-41,-34,98,-30,-31,-28,]),'RPAREN':([12,32,33,34,36,37,38,39,68,70,71,74,77,78,79,80,81,90,],[-9,-35,-37,-39,-42,-43,-44,-45,81,83,-33,-10,-55,-36,-38,-40,-41,-32,]),'LSQUARE':([12,48,],[26,73,]),'LPAREN':([20,21,22,26,30,35,41,55,56,57,58,59,60,61,62,63,64,65,66,67,84,],[35,35,41,35,35,35,35,35,35,35,-50,-51,-52,-53,-54,-46,-47,35,-48,-49,35,]),'NUMBER':([20,21,26,30,35,41,55,56,57,58,59,60,61,62,63,64,65,66,67,73,84,92,],[36,36,36,36,36,36,36,36,36,-50,-51,-52,-53,-54,-46,-47,36,-48,-49,86,36,97,]),'REAL_NUMBER':([20,21,26,30,35,41,55,56,57,58,59,60,61,62,63,64,65,66,67,84,],[37,37,37,37,37,37,37,37,37,-50,-51,-52,-53,-54,-46,-47,37,-48,-49,37,]),'STRING':([20,21,26,30,35,41,55,56,57,58,59,60,61,62,63,64,65,66,67,84,],[38,38,38,38,38,38,38,38,38,-50,-51,-52,-53,-54,-46,-47,38,-48,-49,38,]),'INTEGER':([24,96,],[43,43,]),'BOOLEAN':([24,96,],[44,44,]),'REAL':([24,96,],[45,45,]),'CHAR':([24,96,],[46,46,]),'ARRAY':([24,96,],[48,48,]),'DOT':([27,],[51,]),'DOTDOT':([86,],[92,]),'OF':([91,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'var_declarations':([4,],[5,]),'var_list':([6,],[8,]),'var_declaration':([6,8,],[9,23,]),'id_list':([6,8,],[10,10,]),'statements':([7,75,82,100,],[13,87,89,101,]),'statement':([7,13,54,75,82,87,88,89,100,101,],[14,28,76,14,14,28,94,28,14,28,]),'assignment':([7,13,54,75,82,87,88,89,100,101,],[15,15,15,15,15,15,15,15,15,15,]),'if_statement':([7,13,54,75,82,87,88,89,100,101,],[16,16,16,16,16,16,16,16,16,16,]),'while_statement':([7,13,54,75,82,87,88,89,100,101,],[17,17,17,17,17,17,17,17,17,17,]),'writeln_statement':([7,13,54,75,82,87,88,89,100,101,],[18,18,18,18,18,18,18,18,18,18,]),'variable':([7,13,20,21,26,30,35,41,54,55,56,57,65,75,82,84,87,88,89,100,101,],[19,19,39,39,39,39,39,39,19,39,39,39,39,19,19,39,19,19,19,19,19,]),'expression':([20,21,26,30,35,41,55,84,],[31,40,50,53,68,71,77,90,]),'simple_expression':([20,21,26,30,35,41,55,56,84,],[32,32,32,32,32,32,32,78,32,]),'term':([20,21,26,30,35,41,55,56,57,84,],[33,33,33,33,33,33,33,33,79,33,]),'factor':([20,21,26,30,35,41,55,56,57,65,84,],[34,34,34,34,34,34,34,34,34,80,34,]),'type':([24,96,],[42,99,]),'array_type_definition':([24,96,],[47,47,]),'relop':([32,],[56,]),'addop':([32,78,],[57,57,]),'mulop':([33,79,],[65,65,]),'expression_list':([41,],[70,]),'index_range':([73,],[85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOT','program',8,'p_program','parser.py',125),
  ('var_declarations -> VAR var_list','var_declarations',2,'p_var_declarations','parser.py',129),
  ('var_declarations -> <empty>','var_declarations',0,'p_var_declarations','parser.py',130),
  ('var_list -> var_list var_declaration','var_list',2,'p_var_list','parser.py',137),
  ('var_list -> var_declaration','var_list',1,'p_var_list','parser.py',138),
  ('var_declaration -> id_list COLON type SEMICOLON','var_declaration',4,'p_var_declaration','parser.py',145),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',149),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',150),
  ('variable -> ID','variable',1,'p_variable','parser.py',158),
  ('variable -> ID LSQUARE expression RSQUARE','variable',4,'p_variable','parser.py',159),
  ('type -> INTEGER','type',1,'p_type','parser.py',166),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',167),
  ('type -> REAL','type',1,'p_type','parser.py',168),
  ('type -> CHAR','type',1,'p_type','parser.py',169),
  ('type -> array_type_definition','type',1,'p_type','parser.py',170),
  ('array_type_definition -> ARRAY LSQUARE index_range RSQUARE OF type','array_type_definition',6,'p_array_type_definition','parser.py',175),
  ('index_range -> NUMBER DOTDOT NUMBER','index_range',3,'p_index_range','parser.py',182),
  ('statements -> statements statement SEMICOLON','statements',3,'p_statements','parser.py',189),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','parser.py',190),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',191),
  ('statements -> statement','statements',1,'p_statements','parser.py',192),
  ('statement -> assignment','statement',1,'p_statement','parser.py',202),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',203),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',204),
  ('statement -> writeln_statement','statement',1,'p_statement','parser.py',205),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','parser.py',209),
  ('if_statement -> IF expression THEN BEGIN statements END','if_statement',6,'p_if_statement','parser.py',215),
  ('if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END','if_statement',10,'p_if_statement','parser.py',216),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',217),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',218),
  ('while_statement -> WHILE expression DO BEGIN statements END','while_statement',6,'p_while_statement','parser.py',229),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',234),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',235),
  ('writeln_statement -> WRITELN LPAREN expression_list RPAREN','writeln_statement',4,'p_writeln_statement','parser.py',242),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',248),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','parser.py',249),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',256),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','parser.py',257),
  ('term -> factor','term',1,'p_term','parser.py',264),
  ('term -> term mulop factor','term',3,'p_term','parser.py',265),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',272),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',273),
  ('factor -> REAL_NUMBER','factor',1,'p_factor','parser.py',274),
  ('factor -> STRING','factor',1,'p_factor','parser.py',275),
  ('factor -> variable','factor',1,'p_factor','parser.py',276),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',308),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',309),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',313),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',314),
  ('relop -> LT','relop',1,'p_relop','parser.py',318),
  ('relop -> GT','relop',1,'p_relop','parser.py',319),
  ('relop -> EQ','relop',1,'p_relop','parser.py',320),
  ('relop -> LE','relop',1,'p_relop','parser.py',321),
  ('relop -> GE','relop',1,'p_relop','parser.py',322),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','parser.py',326),
]
