
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN BOOLEAN CHAR COLON COMMA DIVIDE DO DOT ELSE END EQ GE GT ID IF INTEGER LE LPAREN LT MINUS NUMBER PLUS PROGRAM REAL REAL_NUMBER RPAREN SEMICOLON STRING THEN TIMES VAR WHILE WRITELNprogram : PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOTvar_declarations : VAR var_list\n                        | var_list : var_list var_declaration\n                | var_declarationvar_declaration : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDtype : INTEGER\n            | BOOLEAN\n            | REAL\n            | CHARstatements : statements statement SEMICOLON\n                  | statement SEMICOLON\n                  | statements statement\n                  | statementstatement : assignment\n                 | if_statement\n                 | while_statement\n                 | writeln_statementassignment : ID ASSIGN expressionif_statement : IF expression THEN BEGIN statements END\n                    | IF expression THEN BEGIN statements END ELSE BEGIN statements END\n                    | IF expression THEN statement\n                    | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO BEGIN statements ENDexpression_list : expression_list COMMA expression\n                       | expressionwriteln_statement : WRITELN LPAREN expression_list RPARENexpression : simple_expression\n                  | simple_expression relop simple_expressionsimple_expression : term\n                         | simple_expression addop termterm : factor\n            | term mulop factorfactor : LPAREN expression RPAREN\n              | NUMBER\n              | REAL_NUMBER\n              | STRING\n              | IDaddop : PLUS\n             | MINUSmulop : TIMES\n             | DIVIDErelop : LT\n             | GT\n             | EQ\n             | LE\n             | GEexpression : expression AND expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,47,],[0,-1,]),'ID':([2,6,7,8,9,13,14,15,16,17,18,19,20,22,24,25,27,28,30,31,32,33,34,35,36,37,39,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,86,87,88,],[3,11,12,11,-5,12,-16,-17,-18,-19,-20,37,37,-4,45,37,-15,-14,-30,-32,-34,37,-37,-38,-39,-40,37,-21,-13,12,37,37,37,-45,-46,-47,-48,-49,-41,-42,37,-43,-44,-6,12,-24,-50,-31,-33,-35,-36,12,-29,37,12,12,12,-22,-25,-26,12,12,-23,]),'SEMICOLON':([3,14,15,16,17,18,27,30,31,32,34,35,36,37,40,41,42,43,44,46,69,70,71,72,73,74,76,82,83,84,88,],[4,28,-17,-18,-19,-20,48,-30,-32,-34,-37,-38,-39,-40,67,-9,-10,-11,-12,-21,-24,-50,-31,-33,-35,-36,-29,-22,-25,-26,-23,]),'VAR':([4,],[6,]),'BEGIN':([4,5,8,9,22,49,64,67,85,],[-3,7,-2,-5,-4,68,75,-6,86,]),'IF':([7,13,14,15,16,17,18,27,28,30,31,32,34,35,36,37,46,48,49,68,69,70,71,72,73,74,75,76,78,79,80,82,83,84,86,87,88,],[19,19,-16,-17,-18,-19,-20,-15,-14,-30,-32,-34,-37,-38,-39,-40,-21,-13,19,19,-24,-50,-31,-33,-35,-36,19,-29,19,19,19,-22,-25,-26,19,19,-23,]),'WHILE':([7,13,14,15,16,17,18,27,28,30,31,32,34,35,36,37,46,48,49,68,69,70,71,72,73,74,75,76,78,79,80,82,83,84,86,87,88,],[20,20,-16,-17,-18,-19,-20,-15,-14,-30,-32,-34,-37,-38,-39,-40,-21,-13,20,20,-24,-50,-31,-33,-35,-36,20,-29,20,20,20,-22,-25,-26,20,20,-23,]),'WRITELN':([7,13,14,15,16,17,18,27,28,30,31,32,34,35,36,37,46,48,49,68,69,70,71,72,73,74,75,76,78,79,80,82,83,84,86,87,88,],[21,21,-16,-17,-18,-19,-20,-15,-14,-30,-32,-34,-37,-38,-39,-40,-21,-13,21,21,-24,-50,-31,-33,-35,-36,21,-29,21,21,21,-22,-25,-26,21,21,-23,]),'COLON':([10,11,45,],[23,-8,-7,]),'COMMA':([10,11,30,31,32,34,35,36,37,45,65,66,70,71,72,73,74,81,],[24,-8,-30,-32,-34,-37,-38,-39,-40,-7,77,-28,-50,-31,-33,-35,-36,-27,]),'ASSIGN':([12,],[25,]),'END':([13,14,15,16,17,18,27,28,30,31,32,34,35,36,37,46,48,69,70,71,72,73,74,76,78,80,82,83,84,87,88,],[26,-16,-17,-18,-19,-20,-15,-14,-30,-32,-34,-37,-38,-39,-40,-21,-13,-24,-50,-31,-33,-35,-36,-29,82,84,-22,-25,-26,88,-23,]),'ELSE':([15,16,17,18,30,31,32,34,35,36,37,46,69,70,71,72,73,74,76,82,83,84,88,],[-17,-18,-19,-20,-30,-32,-34,-37,-38,-39,-40,-21,79,-50,-31,-33,-35,-36,-29,85,-25,-26,-23,]),'LPAREN':([19,20,21,25,33,39,50,51,52,53,54,55,56,57,58,59,60,61,62,77,],[33,33,39,33,33,33,33,33,33,-45,-46,-47,-48,-49,-41,-42,33,-43,-44,33,]),'NUMBER':([19,20,25,33,39,50,51,52,53,54,55,56,57,58,59,60,61,62,77,],[34,34,34,34,34,34,34,34,-45,-46,-47,-48,-49,-41,-42,34,-43,-44,34,]),'REAL_NUMBER':([19,20,25,33,39,50,51,52,53,54,55,56,57,58,59,60,61,62,77,],[35,35,35,35,35,35,35,35,-45,-46,-47,-48,-49,-41,-42,35,-43,-44,35,]),'STRING':([19,20,25,33,39,50,51,52,53,54,55,56,57,58,59,60,61,62,77,],[36,36,36,36,36,36,36,36,-45,-46,-47,-48,-49,-41,-42,36,-43,-44,36,]),'INTEGER':([23,],[41,]),'BOOLEAN':([23,],[42,]),'REAL':([23,],[43,]),'CHAR':([23,],[44,]),'DOT':([26,],[47,]),'THEN':([29,30,31,32,34,35,36,37,70,71,72,73,74,],[49,-30,-32,-34,-37,-38,-39,-40,-50,-31,-33,-35,-36,]),'AND':([29,30,31,32,34,35,36,37,38,46,63,66,70,71,72,73,74,81,],[50,-30,-32,-34,-37,-38,-39,-40,50,50,50,50,50,-31,-33,-35,-36,50,]),'DO':([30,31,32,34,35,36,37,38,70,71,72,73,74,],[-30,-32,-34,-37,-38,-39,-40,64,-50,-31,-33,-35,-36,]),'RPAREN':([30,31,32,34,35,36,37,63,65,66,70,71,72,73,74,81,],[-30,-32,-34,-37,-38,-39,-40,74,76,-28,-50,-31,-33,-35,-36,-27,]),'LT':([30,31,32,34,35,36,37,72,73,74,],[53,-32,-34,-37,-38,-39,-40,-33,-35,-36,]),'GT':([30,31,32,34,35,36,37,72,73,74,],[54,-32,-34,-37,-38,-39,-40,-33,-35,-36,]),'EQ':([30,31,32,34,35,36,37,72,73,74,],[55,-32,-34,-37,-38,-39,-40,-33,-35,-36,]),'LE':([30,31,32,34,35,36,37,72,73,74,],[56,-32,-34,-37,-38,-39,-40,-33,-35,-36,]),'GE':([30,31,32,34,35,36,37,72,73,74,],[57,-32,-34,-37,-38,-39,-40,-33,-35,-36,]),'PLUS':([30,31,32,34,35,36,37,71,72,73,74,],[58,-32,-34,-37,-38,-39,-40,58,-33,-35,-36,]),'MINUS':([30,31,32,34,35,36,37,71,72,73,74,],[59,-32,-34,-37,-38,-39,-40,59,-33,-35,-36,]),'TIMES':([31,32,34,35,36,37,72,73,74,],[61,-34,-37,-38,-39,-40,61,-35,-36,]),'DIVIDE':([31,32,34,35,36,37,72,73,74,],[62,-34,-37,-38,-39,-40,62,-35,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'var_declarations':([4,],[5,]),'var_list':([6,],[8,]),'var_declaration':([6,8,],[9,22,]),'id_list':([6,8,],[10,10,]),'statements':([7,68,75,86,],[13,78,80,87,]),'statement':([7,13,49,68,75,78,79,80,86,87,],[14,27,69,14,14,27,83,27,14,27,]),'assignment':([7,13,49,68,75,78,79,80,86,87,],[15,15,15,15,15,15,15,15,15,15,]),'if_statement':([7,13,49,68,75,78,79,80,86,87,],[16,16,16,16,16,16,16,16,16,16,]),'while_statement':([7,13,49,68,75,78,79,80,86,87,],[17,17,17,17,17,17,17,17,17,17,]),'writeln_statement':([7,13,49,68,75,78,79,80,86,87,],[18,18,18,18,18,18,18,18,18,18,]),'expression':([19,20,25,33,39,50,77,],[29,38,46,63,66,70,81,]),'simple_expression':([19,20,25,33,39,50,51,77,],[30,30,30,30,30,30,71,30,]),'term':([19,20,25,33,39,50,51,52,77,],[31,31,31,31,31,31,31,72,31,]),'factor':([19,20,25,33,39,50,51,52,60,77,],[32,32,32,32,32,32,32,32,73,32,]),'type':([23,],[40,]),'relop':([30,],[51,]),'addop':([30,71,],[52,52,]),'mulop':([31,72,],[60,60,]),'expression_list':([39,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON var_declarations BEGIN statements END DOT','program',8,'p_program','parser.py',111),
  ('var_declarations -> VAR var_list','var_declarations',2,'p_var_declarations','parser.py',115),
  ('var_declarations -> <empty>','var_declarations',0,'p_var_declarations','parser.py',116),
  ('var_list -> var_list var_declaration','var_list',2,'p_var_list','parser.py',123),
  ('var_list -> var_declaration','var_list',1,'p_var_list','parser.py',124),
  ('var_declaration -> id_list COLON type SEMICOLON','var_declaration',4,'p_var_declaration','parser.py',131),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',135),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',136),
  ('type -> INTEGER','type',1,'p_type','parser.py',143),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',144),
  ('type -> REAL','type',1,'p_type','parser.py',145),
  ('type -> CHAR','type',1,'p_type','parser.py',146),
  ('statements -> statements statement SEMICOLON','statements',3,'p_statements','parser.py',150),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','parser.py',151),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',152),
  ('statements -> statement','statements',1,'p_statements','parser.py',153),
  ('statement -> assignment','statement',1,'p_statement','parser.py',163),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',164),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',165),
  ('statement -> writeln_statement','statement',1,'p_statement','parser.py',166),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',170),
  ('if_statement -> IF expression THEN BEGIN statements END','if_statement',6,'p_if_statement','parser.py',174),
  ('if_statement -> IF expression THEN BEGIN statements END ELSE BEGIN statements END','if_statement',10,'p_if_statement','parser.py',175),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',176),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',177),
  ('while_statement -> WHILE expression DO BEGIN statements END','while_statement',6,'p_while_statement','parser.py',188),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',193),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',194),
  ('writeln_statement -> WRITELN LPAREN expression_list RPAREN','writeln_statement',4,'p_writeln_statement','parser.py',201),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',207),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','parser.py',208),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',215),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','parser.py',216),
  ('term -> factor','term',1,'p_term','parser.py',223),
  ('term -> term mulop factor','term',3,'p_term','parser.py',224),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',231),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',232),
  ('factor -> REAL_NUMBER','factor',1,'p_factor','parser.py',233),
  ('factor -> STRING','factor',1,'p_factor','parser.py',234),
  ('factor -> ID','factor',1,'p_factor','parser.py',235),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',259),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',260),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',264),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',265),
  ('relop -> LT','relop',1,'p_relop','parser.py',269),
  ('relop -> GT','relop',1,'p_relop','parser.py',270),
  ('relop -> EQ','relop',1,'p_relop','parser.py',271),
  ('relop -> LE','relop',1,'p_relop','parser.py',272),
  ('relop -> GE','relop',1,'p_relop','parser.py',273),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','parser.py',277),
]
